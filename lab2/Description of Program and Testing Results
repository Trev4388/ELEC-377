Partner 1: Trevor Kirton - 20160010- 18tk30
Partner 2: Travis Stephney - 20172675 - 18tms9

Description of Program:

The goal of this lab is to use the /proc file system to retrieve information about the current state of the processes on the system. This is done by creating a program that runs in the kernel and thus has access to everything on the machine. Since the kernel has complete access the information we will be receiving will be different then the information provided via the ps function in linux which operates in the user space. The output for the function was to print out the PID, UID, VSZ, and RSS for each of the tasks that needed to be run. Each PID for each task has a corresponding user id, total amount of virtual memory used, and amount of virtual memory that is in ram, which then needs to be displayed to the user.

The first part of the lab in the init_module is copied from lab 0 with syntax changes to fit the current problem. Within the my_read_proc function, it loops through every task to find and print tasks with a non-zero PID. The corresponding UID for this task is then printed. The mm of the task is then checked to see if it is NULL which indicates the task is running in the kernel and thus does not use virtual memory. Alternatively, the program is being run in the user space and is then utilizing virtual memory. This means the program prints the task’s corresponding VSZ and RSS values. From here, the program continues to loop through the remaining tasks and prints any with a non-zero PID. The first task must also be stored when it is printed because the tasks are cyclically linked and thus the program could continue to print forever. After the first task is printed, every task after that is compared to the first task to determine if the program has looped around to the beginning again. If this is the case then all tasks have been printed and the program terminates. 

Testing Results:

The two test files are named ‘lab2out.txt’ and ‘psout.txt’ and correspond to the output from the kernel module and ps command respectively. The two text files show that the kernel module and ps command outputs match except for the final line. This demonstrates that the kernel module functions correctly and the slight difference in outputs can be explained by the fact that the kernel module runs in the kernel and thus has access to all memory while the ps command runs in the user space and only has access to the memory allocated for the user space. This is done for security reasons to prevent the user from accessing/editing parts of memory that they should not have access to. 
